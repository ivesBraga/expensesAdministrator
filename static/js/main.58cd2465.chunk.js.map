{"version":3,"sources":["services/walletAPI.js","actions/index.js","pages/Login.js","components/Header.jsx","components/Table.jsx","pages/Wallet.js","App.js","reducers/wallet.js","reducers/user.js","reducers/index.js","store/index.js","serviceWorker.js","index.js"],"names":["walletAPI","a","fetch","response","obj","json","fetchSuccess","states","exchangesRates","type","Login","handleChange","target","name","value","setState","emailVerifiyer","state","email","password","includesAt","includes","includesCom","verifyPassword","length","buttonClick","dispatch","props","loginSave","redirect","this","to","className","htmlFor","id","data-testid","placeholder","onChange","disabled","onClick","React","Component","connect","Header","expense","prevProps","expenses","map","moeda","currency","exchangeCalc","exchangeRates","ask","console","log","Number","toFixed","user","wallet","Table","description","method","tag","key","Wallet","apiDoc","error","message","USDT","currencies","Object","keys","Moeda","App","exact","path","component","INITIAL_STATE","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.58cd2465.chunk.js","sourcesContent":["const apiUrl = 'https://economia.awesomeapi.com.br/json/all';\n\nconst walletAPI = async () => {\n  const response = await fetch(apiUrl);\n  const obj = response.json();\n  return obj;\n};\n\nexport default walletAPI;\n","import walletAPI from '../services/walletAPI';\n\n// Coloque aqui suas actions\nexport const LOGIN_SAVE = 'LOGIN_SAVE';\nexport const WALLET_INFOS = 'WALLET_INFOS';\nexport const FETCH_SUCCESS = 'FETCH_SUCCESS';\nexport const FETCH_START = 'FETCH_START';\nexport const FETCH_CURRENCIES = 'FETCH_CURRENCIES';\n\nexport const loginSave = (email) => ({ type: LOGIN_SAVE, email });\n\n// export const walletInfos = (expenses) => ({ type: WALLET_INFOS, expenses });\n\nexport const fetchStart = () => ({ type: FETCH_START });\n\nexport const fetchSuccess = (states, exchangesRates) => ({\n  type: FETCH_SUCCESS,\n  states,\n  exchangesRates,\n});\n\nexport const fetchCurrencies = (currencies) => ({\n  type: FETCH_CURRENCIES,\n  currencies,\n});\n\nexport const allExchanges = (states) => async (dispatch) => {\n  dispatch(fetchStart());\n  try {\n    const apiDoc = await walletAPI();\n    return dispatch(fetchSuccess(states, apiDoc));\n  } catch (error) {\n    console.error(error.message);\n  }\n};\n\nexport const allCurrencies = () => async (dispatch) => {\n  dispatch(fetchStart());\n  try {\n    const apiDoc = await walletAPI();\n    delete apiDoc.USDT;\n    return dispatch(fetchCurrencies(apiDoc));\n  } catch (error) {\n    console.error(error.message);\n  }\n};\n","import React from 'react';\nimport 'bulma/css/bulma.min.css';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom/cjs/react-router-dom.min';\nimport propTypes from 'prop-types';\nimport { loginSave } from '../actions';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      email: '',\n      password: '',\n      redirect: false,\n    };\n  }\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  };\n\n  emailVerifiyer = () => {\n    const { email, password } = this.state;\n    const includesAt = email.includes('@');\n    const includesCom = email.includes('.com');\n    const PASSWORD_LENGTH = 6;\n    const verifyPassword = password.length >= PASSWORD_LENGTH;\n    const isButtonDisable = !(includesAt && includesCom && verifyPassword);\n    return isButtonDisable;\n  }\n\n  buttonClick = () => {\n    const { dispatch } = this.props;\n    const { email } = this.state;\n    dispatch(loginSave(email));\n    this.setState({\n      redirect: true,\n    });\n  }\n\n  render() {\n    const {\n      email, password, redirect,\n    } = this.state;\n    return (\n      <form>\n        {redirect ? <Redirect to=\"/carteira\" /> : ''}\n        <label\n          className=\"label\"\n          htmlFor=\"email-input\"\n        >\n          Email\n          <input\n            type=\"email\"\n            id=\"email-input\"\n            name=\"email\"\n            className=\"input is-normal\"\n            data-testid=\"email-input\"\n            placeholder=\"Email\"\n            value={ email }\n            onChange={ this.handleChange }\n          />\n        </label>\n        <label htmlFor=\"password-input\">\n          Password\n          <input\n            type=\"password\"\n            className=\"input is-normal\"\n            name=\"password\"\n            id=\"password-input\"\n            data-testid=\"password-input\"\n            placeholder=\"***\"\n            value={ password }\n            onChange={ this.handleChange }\n          />\n        </label>\n        <button\n          className=\"button\"\n          type=\"button\"\n          disabled={ this.emailVerifiyer() }\n          onClick={ this.buttonClick }\n        >\n          Entrar\n        </button>\n      </form>\n    );\n  }\n}\n\nLogin.propTypes = {\n  dispatch: propTypes.string.isRequired,\n};\n\nexport default connect()(Login);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\n\nclass Header extends Component {\n  constructor() {\n    super();\n    this.state = {\n      expense: 0,\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const { expenses } = this.props;\n    const { expense } = this.state;\n    if (prevProps.expenses !== expenses) {\n      expenses.map((moeda) => {\n        const { value, currency } = moeda;\n        const currencyExchange = moeda.exchangeRates[currency].ask;\n        const exchangeCalc = currencyExchange * value;\n        return (this.setState({ expense: expense + exchangeCalc }));\n      });\n    }\n  }\n\n  render() {\n    const { email, expenses } = this.props;\n    const { expense } = this.state;\n    console.log(expenses);\n    return (\n      <header>\n        <h4 data-testid=\"email-field\">\n          {email}\n        </h4>\n        <h4 data-testid=\"total-field\">\n          {Number(expense).toFixed(2)}\n        </h4>\n        <h4 data-testid=\"header-currency-field\">\n          BRL\n        </h4>\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  email: propTypes.string.isRequired,\n  expenses: propTypes.arrayOf.isRequired,\n};\n\nconst mapStateToProps = (state) => (\n  { email: state.user.email,\n    expenses: state.wallet.expenses }\n);\n\nexport default connect(mapStateToProps)(Header);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\n\nclass Table extends Component {\n  render() {\n    const { expenses } = this.props;\n    return (\n      <table>\n        <tr>\n          <th>Descrição</th>\n          <th>Tag</th>\n          <th>Método de pagamento</th>\n          <th>Valor</th>\n          <th>Moeda</th>\n          <th>Câmbio utilizado</th>\n          <th>Valor convertido</th>\n          <th>Moeda de conversão</th>\n          <th>Editar/Excluir</th>\n        </tr>\n        {\n          expenses.length > 0 && expenses.map(({\n            value,\n            description,\n            currency,\n            method,\n            tag,\n            exchangeRates,\n            id,\n          }) => (\n            <tr key={ id }>\n              <td>{description}</td>\n              <td>{tag}</td>\n              <td>{method}</td>\n              <td>{Number(value).toFixed(2)}</td>\n              <td>{exchangeRates[currency].name}</td>\n              <td>{Number(exchangeRates[currency].ask).toFixed(2)}</td>\n              <td>{Number(value * exchangeRates[currency].ask).toFixed(2)}</td>\n              <td>Real</td>\n              <td>Editar/Excluir</td>\n            </tr>\n          ))\n        }\n      </table>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nTable.propTypes = {\n  expenses: propTypes.arrayOf.isRequired,\n};\n\nexport default connect(mapStateToProps)(Table);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport { allCurrencies, allExchanges } from '../actions';\nimport Table from '../components/Table';\n// import walletAPI from '../services/walletAPI';\n\nclass Wallet extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      id: 0,\n      value: '',\n      description: '',\n      currency: '',\n      method: '',\n      tag: '',\n    };\n  }\n\n  componentDidMount() {\n    const { dispatch } = this.props;\n    dispatch(allCurrencies());\n  }\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  };\n\n  buttonClick = () => {\n    const { id } = this.state;\n    this.setState({ id: id + 1, value: '' });\n    const { dispatch } = this.props;\n    dispatch(allExchanges(this.state));\n  }\n\n  render() {\n    const {\n      value,\n      description,\n      currency,\n      method,\n      tag,\n    } = this.state;\n    const { currencies } = this.props;\n    return (\n      <div>\n        <Header />\n        <form>\n          <label\n            htmlFor=\"value-input\"\n          >\n            Valor da despesa\n            <input\n              data-testid=\"value-input\"\n              type=\"number\"\n              id=\"value-input\"\n              name=\"value\"\n              value={ value }\n              onChange={ this.handleChange }\n            />\n          </label>\n          <label htmlFor=\"description-input\">\n            Descrição da despesa\n            <input\n              data-testid=\"description-input\"\n              id=\"description-input\"\n              name=\"description\"\n              value={ description }\n              onChange={ this.handleChange }\n            />\n          </label>\n          <label htmlFor=\"currency-input\">\n            Moeda utilizada\n            <select\n              data-testid=\"currency-input\"\n              id=\"currency-input\"\n              name=\"currency\"\n              value={ currency }\n              onChange={ this.handleChange }\n            >\n              {\n                Object.keys(currencies).map((Moeda) => (\n                  <option\n                    data-testid={ Moeda.name }\n                    key={ Moeda }\n                  >\n                    { Moeda }\n                  </option>\n                ))\n              }\n            </select>\n          </label>\n          <label htmlFor=\"method-input\">\n            Método de pagamento\n            <select\n              data-testid=\"method-input\"\n              id=\"method-input\"\n              name=\"method\"\n              value={ method }\n              onChange={ this.handleChange }\n            >\n              <option>\n                Dinheiro\n              </option>\n              <option>\n                Cartão de crédito\n              </option>\n              <option>\n                Cartão de débito\n              </option>\n            </select>\n          </label>\n          <label htmlFor=\"tag-input\">\n            Categoria da despesa\n            <select\n              data-testid=\"tag-input\"\n              id=\"tag-input\"\n              name=\"tag\"\n              value={ tag }\n              onChange={ this.handleChange }\n            >\n              <option>\n                Alimentação\n              </option>\n              <option>\n                Lazer\n              </option>\n              <option>\n                Trabalho\n              </option>\n              <option>\n                Transporte\n              </option>\n              <option>\n                Saúde\n              </option>\n            </select>\n          </label>\n          <button\n            type=\"button\"\n            onClick={ this.buttonClick }\n          >\n            Adicionar despesa\n          </button>\n        </form>\n        <Table />\n      </div>);\n  }\n}\n\nWallet.propTypes = {\n  dispatch: propTypes.string.isRequired,\n  currencies: propTypes.string.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n});\n\nexport default connect(mapStateToProps)(Wallet);\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/expensesadministrator\" component={ Login } />\n      <Route exact path=\"/carteira\" component={ Wallet } />\n    </Switch>\n  );\n}\n\nexport default App;\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nimport { FETCH_SUCCESS, FETCH_CURRENCIES } from '../actions';\n\nconst INITIAL_STATE = {\n  expenses: [],\n  currencies: [],\n};\n\nexport default function wallet(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case FETCH_SUCCESS:\n    return {\n      ...state,\n      expenses: [\n        ...state.expenses,\n        {\n          id: action.states.id,\n          value: action.states.value,\n          description: action.states.description,\n          currency: action.states.currency,\n          method: action.states.method,\n          tag: action.states.tag,\n          exchangeRates: action.exchangesRates,\n        },\n      ],\n    };\n  case FETCH_CURRENCIES:\n    return {\n      ...state,\n      currencies: action.currencies,\n    };\n  // case REQUEST_CURRENCY:\n  //   return {\n  //     ...state,\n  //     currencies: action.api,\n  //   };\n  default:\n    return state;\n  }\n}\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\nimport { LOGIN_SAVE } from '../actions';\n\nconst INITIAL_STATE = {\n  email: '',\n};\n\nexport default function user(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case LOGIN_SAVE:\n    return {\n      ...state,\n      email: action.email,\n    };\n  default:\n    return state;\n  }\n}\n","// import user from './user';\nimport { combineReducers } from 'redux';\nimport wallet from './wallet';\nimport user from './user';\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\n\nconst rootReducer = combineReducers({ user, wallet });\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from '../reducers/index';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store/index';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}